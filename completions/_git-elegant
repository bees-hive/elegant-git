#compdef git-elegant git
#description enables Elegant Git completion
#
# It's recommended to use this completion with the following Git completion file:
# https://raw.githubusercontent.com/zsh-users/zsh/master/Completion/Unix/Command/_git

_git-elegant (){
    # update this function if either new commands or options are added
    # all commands should be added in alphabetical order
    local curcontext='$curcontext' state line
    typeset -A opt_args
    _arguments -C ':command:->command' '*::option:->option'
    local all_commands=(
        'accept-work:adds modifications to the default development branch'
        'acquire-git:configures your Git installation'
        'acquire-repository:configures the current local Git repository'
        'actualize-work:actualizes the current branch with upstream commits'
        'amend-work:amends the last commit'
        'clone-repository:clones a remote repository and configures it'
        'deliver-work:publishes HEAD to a remote repository'
        'init-repository:initializes a new repository and configures it'
        'make-workflow:makes a new workflow file'
        'obtain-work:checkouts a remote-tracking branch'
        'polish-work:rebases HEAD interactively'
        'polish-workflow:opens a given workflow file'
        'prune-repository:removes useless local branches'
        'release-work:releases the default development branch'
        'save-work:commits current modifications'
        'show-commands:prints Elegant Git commands'
        'show-release-notes:prints a release log between two refs'
        'show-work:prints HEAD state'
        'show-workflows:prints file locations of the configured workflows'
        'start-work:creates a new branch'
    )

    case ${state} in
        command)
            local options=(
                '--help:displays help'
                '--version:displays program version'
                '--no-workflows:disables available workflows'
            )
            _describe 'first' all_commands -- options
            ;;
        option)
            if [[ ${line[1]} == --no-workflows ]]; then
                __ge_complete_commands_workflow
            else
                __ge_complete_commands
            fi
        ;;
    esac
}

__ge_complete_commands_workflow() {
    _arguments ':command:->command' '*::options:->options'
    case ${state} in
        command) _describe 'only commands' all_commands ;;
        options) __ge_complete_commands ;;
    esac
}

__ge_complete_commands () {
    # update this function if a new command requires a competion
    # default completion is empty
    case ${line[1]} in
        obtain-work)                __ge_remotes ;;
        accept-work|actualize-work) __ge_all_branches ;;
        show-release-notes)         __ge_show_release_notes ;;
        start-work)                 __ge_start_work ;;
        make-workflow)              __ge_make_workflow ;;
        polish-workflow)
            local files=($(git elegant show-workflows))
            _arguments '--help' '--no-workflows' '1:file:(${files[@]})'
            ;;
        *)  _arguments '--help' '--no-workflows'  ;;
    esac
}

__ge_remotes() {
    # completes first position with remote branches
    local remotes=(
        $(git for-each-ref --format '%(refname:short)' refs/remotes 2>/dev/null)
    )
    _arguments '--help' \
               '--no-workflows' \
               '1:branch:(${remotes[@]})'
}

__ge_all_branches() {
    # completes first position with all available branches
    local branches=(
        $(git branch --all --format='%(refname:short)')
    )
    _arguments '--help' \
               '--no-workflows' \
               '1:branch:(${branches[@]})'
}

__ge_show_release_notes_modes(){
    local modes=(
        'simple:prints the messages as a plain text (default one)'
        'smart:prints the messages in a form of adopted for a git hosting'
    )
    _describe 'modes' modes
}

__ge_show_release_notes() {
    local all=(
        $(git for-each-ref --sort '-version:refname' --format '%(refname:short)' refs 2>/dev/null)
    )
    _arguments '--help' \
               '--no-workflows' \
               '1:mode:__ge_show_release_notes_modes' \
               '2:from:(${all[@]})' \
               '3:to:(${all[@]})'
}

__ge_start_work() {
    local all=(
        $(git for-each-ref --sort '-version:refname' --format '%(refname:short)' refs 2>/dev/null)
    )
    _arguments '--help' \
               '--no-workflows' \
               '1:name:()' \
               '2:from:(${all[@]})'
}

__ge_make_workflow_types() {
    local types=(
        'ahead:runs this workflow ahead of the command execution'
        'after:runs this workflow after of the command execution'
    )
    _describe 'types' types
}

__ge_make_workflow_locations() {
    local locations=(
        'common:stores this workflow in ".workflows" directory (public)'
        'personal:stores this workflow in ".git/.workflows" directory (private)'
    )
    _describe 'locations' locations
}

__ge_make_workflow() {
    local commands=( $(git elegant show-commands) )
    _arguments '--help' \
               '--no-workflows' \
               '1:command:(${commands[@]})' \
               '2:type:__ge_make_workflow_types' \
               '3:location:__ge_make_workflow_locations'
}
