#!/usr/bin/env bash
set -e

command-purpose() {
    cat <<MESSAGE
Adds modifications to the default development branch.
MESSAGE
}

command-synopsis() {
    cat <<MESSAGE
usage: git elegant accept-work <branch>
MESSAGE
}

command-description() {
    cat<<MESSAGE
Checkouts a given branch into a temporary one and rebases the head of the
default development branch, checkouts the default development branch and
makes a fast-forward merge of the temporary branch, and removes the temporary
branch.

A \`<branch>\` can be either a local branch or a remote-tracking branch or a
pattern. The pattern should be a string that is a part of the remote-tracking
branch name. It is used to search the desired branch across the remotes for
processing (as under the hood the pattern is passed to
\`git elegant obtain-work\`, please refer to that command for the details).

If the local repository is associated with a remote one, then the remote
default development branch is used instead of local one as well as it gets
fetched prior to the command execution and pushed after.

If a given branch name has a full match with a local one, then the local branch
is used, otherwise, the command acts with a remote one to perform checkout and
deletion. As the command works with all configured remote repositories, the
deletion is performed only for \`origin\`.

If there is a rebase in progress initiated by this command, it will be
continued instead, otherwise, the command stops.

The command uses branch and stash pipes to preserve the current Git state prior
to execution and restore after.

Approximate commands flow is
\`\`\`bash
==>> git elegant accept-work task-123
git fetch --all
git checkout --force -B __eg origin/task-123
git rebase origin/master
git checkout master
git merge --ff-only __eg
git push origin master:master
git branch --delete --force __eg
git push origin --delete task-123
\`\`\`
MESSAGE
}

--accept-work-logic() {
    local work_branch="__eg"
    local changes=${1}
    source ${BINS}/plugins/state
    source ${BINS}/plugins/configuration-default-branches
    if is-there-active-rebase; then
        local rb=$(rebasing-branch)
        if [[ ${work_branch} == ${rb} ]]; then
            git-verbose rebase --continue
        else
            error-text "First, please complete current rebase which updates '${rb}' branch."
            exit 43
        fi
    else
        _error-if-empty "${changes}" "Please provide a branch name."
        if git rev-parse --verify --quiet --abbrev-ref --branches=refs/heads ${changes} >/dev/null; then
            git-verbose fetch --all
            git-verbose checkout -B ${work_branch} ${changes}
        else
            git elegant obtain-work "${changes}" "${work_branch}"
        fi
        git-verbose rebase $(freshest-default-branch)
    fi
    local actual_remote=$(git for-each-ref --format='%(upstream:short)' refs/heads/${work_branch})
    git-verbose checkout ${DEFAULT_BRANCH}
    git-verbose merge --ff-only ${work_branch}
    git-verbose branch --delete --force ${work_branch}
    if are-there-remotes; then
        git-verbose push ${DEFAULT_UPSTREAM_REPOSITORY} ${DEFAULT_BRANCH}:${DEFAULT_BRANCH}
        if [[ ${actual_remote} =~ ^origin/ ]];  then
            source ${BINS}/plugins/transformation
            git-verbose push ${DEFAULT_UPSTREAM_REPOSITORY} --delete $(branch-from-remote-branch ${actual_remote})
        fi
    fi
}

default() {
    stash-pipe branch-pipe --accept-work-logic "${@}"
}
