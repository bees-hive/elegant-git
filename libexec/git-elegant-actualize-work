#!/usr/bin/env bash
set -e

command-purpose() {
    cat <<MESSAGE
Actualizes the current branch with upstream commits.
MESSAGE
}

command-synopsis() {
    cat <<MESSAGE
usage: git elegant actualize-work [branch-name]
MESSAGE
}

command-description() {
    cat<<MESSAGE
Rebases the head of the upstream branch into the current one. By default, the
upstream branch is the default development branch.

A \`[branch-name]\` argument allows you to redefine the upstream branch. It
supports both local and remote branches.

If the upstream branch has a remote-tracking branch or is a remote branch, it
fetches before making a rebase.

If there is a rebase in progress initiated by this command, it will be
continued prior to running the main logic.

The command uses stash pipe to preserve the current Git state prior to execution
and restore after.

Approximate commands flow is
\`\`\`bash
==>> git elegant actualize-work origin/some-work
git fetch
git rebase origin/some-work
\`\`\`
MESSAGE
}

--fetch() {
    git-verbose fetch || info-text "Unable to fetch. The last local revision will be used."
}

--logic() {
    source ${BINS}/plugins/state
    if is-there-active-rebase
    then
        git-verbose rebase --continue
    fi
    source ${BINS}/plugins/configuration-default-branches
    source ${BINS}/plugins/state
    if test -n "${1}"
    then
        if is-remote-branch ${1}
        then
            --fetch
            git-verbose rebase ${1}
        elif is-there-upstream-for ${1}
        then
            --fetch
            git-verbose rebase $(upstream-of ${1}) ${1}
            git-verbose rebase ${1}
        else
            git-verbose rebase ${1}
        fi
    elif are-there-remotes
    then
        --fetch
        git-verbose rebase ${DEFAULT_REMOTE_TRACKING_BRANCH}
    else
        git-verbose rebase ${DEFAULT_BRANCH}
    fi
}

default() {
    stash-pipe --logic "${@}"
}
