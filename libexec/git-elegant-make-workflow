#!/usr/bin/env bash

command-purpose() {
    cat <<MESSAGE
Makes a new workflow file.
MESSAGE
}

command-synopsis() {
    cat <<MESSAGE
usage: git elegant make-workflow <command> <type> <location>
MESSAGE
}

command-description() {
    cat<<MESSAGE
Makes a new workflow file for a given Elegant Git command and opens it for the
further scripting in the default text editor. The created file will have a
shebang line pointing to \`#!/usr/bin/env sh -e\` and executable permissions.
That's why the created file becomes an executable one by default. All needed
directories will be created if any.

A \`<command>\` is a name of Elegant Git command.

A \`<type>\` defines whether it should be executed \`ahead\` or \`after\` the
given command.

A \`<location>\` defines the availability such as personal (located at
\`.git/.workflows\`) or common (located at \`.workflows\`).

Approximate commands flow is
\`\`\`bash
==>> git elegant make-workflow show-work ahead common
mkdir -p .workflows
touch .workflows/show-work-ahead
chmod +x .workflows/show-work-ahead
vim .workflows/show-work-ahead
\`\`\`
MESSAGE
}

--command() {
    command-text "$@"
    "$@"
}

default() {
    _error-if-empty "${1}" "Please specify a name of Elegant Git command"
    _error-if-empty "${2}" "Please specify a type of the workflow"
    _error-if-empty "${3}" "Please specify a location of the workflow"
    local file=$(workflows-file ${3} ${1} ${2})
    if test -e ${file}; then
        error-text "The '${file}' file already exists."
        error-text "Please remove it manually and repeat the command if you need a new one."
        exit 43
    fi
    local directory=$(workflows-directory ${3})
    --command mkdir -p ${directory}
    --command touch ${file}
    echo "#!/usr/bin/env sh -e" >> ${file}
    echo "# This script invokes ${2} of the '${1}' execution." >> ${file}
    echo "" >> ${file}
    --command chmod +x ${file}
    --command $(git config core.editor) ${file}
}
