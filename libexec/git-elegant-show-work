#!/usr/bin/env bash
set -e

command-purpose() {
    cat <<MESSAGE
Prints HEAD state.
MESSAGE
}

command-synopsis() {
    cat <<MESSAGE
usage: git elegant show-work
MESSAGE
}

command-description() {
    cat<<MESSAGE
Prints HEAD state by displaying local and remote-tracking (if available) refs,
commits that aren't in the default development branch, uncommitted
modifications, and available stashes.

Approximate commands flow is
\`\`\`bash
==>> git elegant show-work
git log --oneline ${DEFAULT_BRANCH}..@
git status --short
git stash list
\`\`\`
MESSAGE
}

default(){
    local branch=$(git rev-parse --abbrev-ref @)
    info-text ">>> Branch refs:"
    info-text "local:  ${branch}"
    local upstream=$(git rev-parse --abbrev-ref ${branch}@{upstream} 2>/dev/null || echo)
    if [[ -n ${upstream} ]]; then
        info-text "remote: ${upstream}"
    fi
    info-text ""
    if [[ -n $(git rev-list ${DEFAULT_BRANCH}..${branch}) ]]; then
        info-text ">>> New commits (comparing to '${DEFAULT_BRANCH}' branch):"
        git log --oneline ${DEFAULT_BRANCH}..${branch}
        info-text ""
    fi
    if [[ -n $(git status --short) ]]; then
        info-text ">>> Uncommitted modifications:"
        git status --short
        info-text ""
    fi
    if [[ -n $(git stash list) ]]; then
        info-text ">>> Available stashes:"
        git stash list
        info-text ""
    fi
}
