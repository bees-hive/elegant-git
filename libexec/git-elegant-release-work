#!/usr/bin/env bash

command-purpose() {
    cat <<MESSAGE
Releases the default development branch.
MESSAGE
}

command-synopsis() {
    cat <<MESSAGE
usage: git elegant release-work [name]
MESSAGE
}

command-description() {
    cat<<MESSAGE
Annotates the head commit of the default development branch by adding anotated
tag, publishes it to the remote repository, and prepares release notes.

A \`[name]\` is a desired name for the new tag. If it isn't provided, the
command will ask it interactively.

The command generates a tag's message that has to be polished and saved. The
message is a list of commits titles generated based on commits between the last
tagged commit (not included) and head one (included) ordered from oldest to
newest. If there are no tags in the repository, then all commits are used to
generate the tag's message.

The release notes are the output of \`git elegant show-release-notes smart ...\`
command. They are either copied to the clipboard (if \`pbcopy\` or \`xclip\`
commands are available) or printed to the standard output.

The command uses branch and stash pipes to preserve the current Git state prior
to execution and restore after.

Approximate commands flow is
\`\`\`bash
==>> git elegant release-work 1.2.0
git checkout master
git pull --tags
git tag --annotate --file tag-message --edit 1.2.0
git push --tags
git elegant show-release-notes smart 1.1.12 1.2.0
\`\`\`
MESSAGE
}

--copy-notes-if-possible(){
    local default_tool="cat"
    local copy_tool=${default_tool}
    # mac
    type pbcopy >/dev/null 2>&1 && copy_tool="pbcopy"
    # linux
    type xclip >/dev/null 2>&1 && copy_tool="xclip -selection clipboard"
    echo "${1}" | ${copy_tool}
    if [[ ! "${default_tool}" == "${copy_tool}" ]]; then
        info-text "The release notes are copied to clipboard."
    fi
}

--release-work() {
    source ${BINS}/plugins/configuration-default-branches
    git-verbose checkout ${DEFAULT_BRANCH}
    git-verbose pull --tags
    source ${BINS}/plugins/state
    local new_tag="${1}"
    local last_tag=$(last-tag)
    if [[ -z ${new_tag} ]]; then
        question-text "'${last_tag}' is the last tag. Which one will be next? "
        read new_tag
    fi
    local message="tag-message"
    echo "Release ${new_tag}" >> ${message}
    echo "" >> ${message}
    local diapason=${last_tag}...@
    if [[ -z ${last_tag} ]]; then
        diapason=@
        last_tag=all-commits
    fi
    git log ${diapason} --pretty=format:'- %s' --reverse >> ${message}
    echo "" >> ${message}
    echo "" >> ${message}
    git-verbose tag --annotate --file ${message} --edit ${new_tag}
    remove-file ${message}
    git-verbose push --tags
    git-verbose-op --copy-notes-if-possible elegant show-release-notes smart ${last_tag} @
}

default() {
    stash-pipe branch-pipe --release-work "${@}"
}
