#!/usr/bin/env bash
set -e
[  -n "$GED" ] && set -x

# Update PATH for a round of command execution.
# It registers all "libexec" scripts.
BINS=$(dirname ${0})
export PATH=${BINS}:${PATH}

__red=`tput setaf 1`
__green=`tput setaf 2`
__magenta=`tput setaf 5`
__reset=`tput sgr0`
__site="https://elegant-git.bees-hive.org"

box(){
    t="$@xxxxxx"
    c=${replace:-=}
    echo ${t//?/$c}
    echo "$c$c $@ $c$c"
    echo ${t//?/$c}
}

boxtee() {
    box "$@"
    "$@"
}

__gm() {
    echo "${__green}$@${__reset}"
}

__rm() {
    echo "${__red}$@${__reset}"
}

__mmn() {
    echo -n "${__magenta}$@${__reset}"
}

MASTER="master"
REMOTE_NAME="origin"
RMASTER="${REMOTE_NAME}/master"

_error-if-empty() {
    # _error-if-empty <a value to check> <error message>
    if [[ -z "$1" ]]; then
        __rm "$2"
        exit 45
    fi
}

__branches() {
    local branch_command="$1"; shift
    local b=$(eval "$branch_command" | sed -e 's|[* ]||g')
    echo ${b[@]}
}

__loop_ask() {
    local c="$1"; shift
    local m="$1"; shift
    [ -z "$1" ] && return 0
    for i in $@; do
        __mmn "$m [$i] "
        read answer
        if [ -z "$answer" ]; then
            eval "$c $i"
        fi
    done
}

__loop() {
    local c="$1"; shift
    [ -z "$1" ] && return 0
    for i in $@; do
        eval "$c $i"
    done
}

__batch() {
    local MM="$1"; shift
    local AM="$1"; shift
    local CM="$1"; shift
    __mmn "$MM "
    read answer
    if [ -z "$answer" ]; then
        __loop "$CM" $@
    else
        __loop_ask "$CM" "$AM" $@
    fi
}

usage() {
    echo "git elegant <command>"
    git elegant commands
    # @todo #6 Describe usage of git elegant
}

main() {
    local COMMAND="help"
    [[ -n "$1" ]] && COMMAND="$1" && shift
    [[ "$COMMAND" = "help" ]] && usage && exit 0
    [[ ! -e "$BINS/git-elegant-$COMMAND" ]] && echo "Unknown command: git elegant $COMMAND" && usage && exit 46
    . "$BINS/git-elegant-$COMMAND"

    default "$@"
}

main "$@"
