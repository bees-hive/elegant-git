#!/usr/bin/env bash
set -e
[  -n "$GED" ] && set -x

# Update PATH for a round of command execution.
# It registers all "libexec" scripts.
BINS=$(dirname ${0})
export PATH=${BINS}:${PATH}
source ${BINS}/plugins/pipe
source ${BINS}/plugins/text

__site="https://elegant-git.bees-hive.org"


git-verbose() {
    # Prints a command to be executed and executes it using `git` executable.
    # usage: git-verbose [arg]...
    command-text "git $@"
    git "$@"
}

git-verbose-op() {
    # Prints a command to be executed, executes it using `git` executable,
    # and processes the output by a given function instead of printing it.
    # usage: git-verbose-op <function> [arg]...
    local processor=${1}; shift
    command-text "git $@"
    ${processor} "$(git "$@" 2>&1)"
}

MASTER="master"
REMOTE_NAME="origin"
RMASTER="${REMOTE_NAME}/master"

_error-if-empty() {
    # _error-if-empty <a value to check> <error message>
    if [[ -z "$1" ]]; then
        error-text "$2"
        exit 45
    fi
}

branch-from-remote-reference() {
    # usage: branch-from-remote-reference <full reference name>
    echo ${1} | sed "s|^[a-zA-Z0-9_-]*/||g"
}

remove-file() {
    [[ -f ${1} ]] && rm ${1}
}

--print-command-in-usage() { (
    source "${BINS}/git-elegant-${1}"
    printf "    %-20s %s\n" "${1}" "$(command-purpose)"

) }

--usage() {
    cat <<MESSAGE

An assistant who carefully automates routine work with Git.

usage: git elegant [-h | --help | help | --version | version]
   or: git elegant <command> [-h | --help | help]
   or: git elegant <command> [--no-workflows] [args]
   or: git elegant [--no-workflows] <command> [args]

    -h, --help, help    displays help
    --version, version  displays program version
    --no-workflows      disables available workflows

There are commands used in various situations such as

 enable Elegnat Git services
$(--print-command-in-usage acquire-git)
$(--print-command-in-usage acquire-repository)
$(--print-command-in-usage clone-repository)
$(--print-command-in-usage init-repository)

 serve a repository
$(--print-command-in-usage prune-repository)

 enhance contribution rules
$(--print-command-in-usage show-workflows)

 make day-to-day contributions
$(--print-command-in-usage start-work)
$(--print-command-in-usage save-work)
$(--print-command-in-usage amend-work)
$(--print-command-in-usage show-work)
$(--print-command-in-usage polish-work)

 interact with others
$(--print-command-in-usage deliver-work)
$(--print-command-in-usage obtain-work)

 manage contributions
$(--print-command-in-usage accept-work)
$(--print-command-in-usage release-work)
$(--print-command-in-usage show-release-notes)

 and others
$(--print-command-in-usage show-commands)


Please visit ${__site} to find out more.

MESSAGE
}

--run-file(){
    if [[ -f "${1}" ]]; then
        command-text ${1}
        ${1}
    fi
}

--run-workflow(){
    local type=${1}
    local command=${2}
    --run-file "$(personal-workflows-file ${command} ${type})"
    --run-file "$(common-workflows-file ${command} ${type})"
}

--load-command(){
    local commandfile="${BINS}/git-elegant-${1}"
    if [[ -f ${commandfile} ]]; then
        source ${commandfile}
    else
        echo "Unknown command: git elegant ${1}"
        --usage
        exit 46
    fi
}

--run-command() {
    # usage: <command name> [arg]...
    local COMMAND=${1}; shift
    --load-command ${COMMAND}
    case "${1}" in
        -h|--help|help)
            echo ""
            command-synopsis
            echo ""
            command-description
            echo ""
            ;;
        --no-workflows)
            shift
            default "$@"
            ;;
        *)
            source ${BINS}/plugins/workflows
            --run-workflow ahead ${COMMAND}
            default "$@"
            --run-workflow after ${COMMAND}
            ;;
    esac
}

main() {
    local COMMAND="none"
    [[ -n "$1" ]] && COMMAND="$1" && shift
    case "${COMMAND}" in
        none|-h|--help|help)
            --usage
            ;;
        --version|version)
            cat "${BINS}/../version"
            ;;
        --no-workflows)
            COMMAND=${1}
            shift
            --run-command ${COMMAND} --no-workflows "$@"
            ;;
        *)  --run-command ${COMMAND} "$@"
            ;;
    esac
}

main "$@"
