#!/usr/bin/env bash
set -e
[  -n "$GED" ] && set -x

# Update PATH for a round of command execution.
# It registers all "libexec" scripts.
BINS=$(dirname ${0})
export PATH=${BINS}:${PATH}
source ${BINS}/plugins/pipe
source ${BINS}/plugins/text

__site="https://elegant-git.bees-hive.org"


git-verbose() {
    # Prints a command to be executed and executes it using `git` executable.
    # usage: git-verbose [arg]...
    command-text "git $@"
    git "$@"
}

git-verbose-op() {
    # Prints a command to be executed, executes it using `git` executable,
    # and processes the output by a given function instead of printing it.
    # usage: git-verbose-op <function> [arg]...
    local processor=${1}; shift
    command-text "git $@"
    ${processor} "$(git "$@" 2>&1)"
}

MASTER="master"
REMOTE_NAME="origin"
RMASTER="${REMOTE_NAME}/master"

_error-if-empty() {
    # _error-if-empty <a value to check> <error message>
    if [[ -z "$1" ]]; then
        error-text "$2"
        exit 45
    fi
}

__loop_ask() {
    local c="$1"; shift
    local m="$1"; shift
    [ -z "$1" ] && return 0
    for i in $@; do
        question-text "$m [$i] (y/n):"
        read answer
        if [[ "${answer}" == "y" ]]; then
            eval "$c $i"
        fi
    done
}

__loop() {
    local c="$1"; shift
    [ -z "$1" ] && return 0
    for i in $@; do
        eval "$c $i"
    done
}

__batch() {
    local MM="$1"; shift
    local AM="$1"; shift
    local CM="$1"; shift
    question-text "$MM (y/n): "
    read answer
    if [[ "${answer}" == "y" ]]; then
        __loop "$CM" $@
    else
        __loop_ask "$CM" "$AM" $@
    fi
}

branch-from-remote-reference() {
    # usage: branch-from-remote-reference <full reference name>
    echo ${1} | sed "s|^[a-zA-Z0-9_-]*/||g"
}

remove-file() {
    [[ -f ${1} ]] && rm ${1}
}

--print-command-in-usage() { (
    source "${BINS}/git-elegant-${1}"
    printf "    %-20s %s\n" "${1}" "$(command-purpose)"

) }

--usage() {
    cat <<MESSAGE

An assistant who carefully automates routine work with Git.

usage: git elegant [-h | --help | help]
   or: git elegant [-v | --version | version]
   or: git elegant <command> [args]
   or: git elegant <command> [-h | --help | help]


There are commands used in various situations such as

 act with a repository
$(--print-command-in-usage clone-repository)
$(--print-command-in-usage init-repository)
$(--print-command-in-usage acquire-repository)
$(--print-command-in-usage clear-local)

 manage a personal work
$(--print-command-in-usage start-work)
$(--print-command-in-usage save-work)
$(--print-command-in-usage amend-work)
$(--print-command-in-usage deliver-work)

 operate a flow of work management
$(--print-command-in-usage obtain-work)
$(--print-command-in-usage accept-work)

 release new versions
$(--print-command-in-usage show-release-notes)
$(--print-command-in-usage release-work)

 and others
$(--print-command-in-usage commands)


Please visit ${__site} to find out more.

MESSAGE
}

--run-file(){
    if [[ -f "${1}" ]]; then
        command-text ${1}
        ${1}
    fi
}

--run-workflow(){
    local type=${1}
    local command=${2}
    --run-file ".git/.workflows/${command}-${type}"
    --run-file ".workflows/${command}-${type}"
}

--run-command() {
    # usage: <command name> [arg]...
    local COMMAND=${1}; shift
    . "${BINS}/git-elegant-${COMMAND}" 2>/dev/null || {
        echo "Unknown command: git elegant $COMMAND" && --usage && exit 46
    }
    case "${1}" in
        -h|--help|help)
            echo ""
            command-synopsis
            echo ""
            command-description
            echo ""
            ;;
        *)
            --run-workflow ahead ${COMMAND}
            default "$@"
            --run-workflow after ${COMMAND}
            ;;
    esac
}

main() {
    local COMMAND="none"
    [[ -n "$1" ]] && COMMAND="$1" && shift
    case "${COMMAND}" in
        none|-h|--help|help)    --usage                       ;;
        -v|--version|version)   cat "${BINS}/../version"      ;;
        *)                      --run-command ${COMMAND} "$@" ;;
    esac
}

main "$@"
