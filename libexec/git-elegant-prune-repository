#!/usr/bin/env bash
set -e

command-purpose() {
    cat <<MESSAGE
Removes useless local branches.
MESSAGE
}

command-synopsis() {
    cat <<MESSAGE
usage: git elegant prune-repository
MESSAGE
}

command-description() {
    cat<<MESSAGE
Identifies useless branches within the current repository and removes them. A
branch is useless if it either has an unavailable remote-tracking branch (1)
or does not have new commits comparing to the default development branch (2).

1 - Usually, a local branch has this state when an appropriate remote-tracking
branch was merged and removed. As these manipulations were made on the server
side, the local branch is still present, but useless.

2 - This kind of branches appears when a branch is created for some purposes but
does not have any commits nowadays. So, it is useless.

Approximate commands flow is
\`\`\`bash
==>> git elegant prune-repository
git checkout master
git fetch --all
git rebase
git branch --delete --force task-24
git branch --delete --force 2349
git branch --delete --force task-1
\`\`\`

The command works even if the remotes are unavailable.
MESSAGE
}

default() {
    source ${BINS}/plugins/state
    git-verbose checkout ${DEFAULT_BRANCH}
    if is-there-upstream-for ${DEFAULT_BRANCH}; then
        git-verbose fetch --all || info-text "As the remotes can't be fetched, the current local version is used."
        git-verbose rebase
    fi
    source ${BINS}/plugins/configuration-protected-branches
    for branch in $(git for-each-ref --format "%(refname:short)" refs/heads); do
        if is-branch-protected ${branch} ; then continue; fi
        if [[ -n $(git config --get branch.${branch}.merge) ]]; then
            if is-there-upstream-for ${branch}; then
                # the branch has existing upstream; keep it
                continue
            fi
        else
            if [[ ! $(git merge-base ${DEFAULT_BRANCH} ${branch}) == $(git rev-parse ${branch}) ]]; then
                # the branch has new commits; keep it
                continue
            fi
        fi
        git-verbose branch --delete --force ${branch}
    done
}
