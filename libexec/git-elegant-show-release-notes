#!/usr/bin/env bash

command-purpose() {
    cat <<MESSAGE
Prints a release log between two references.
MESSAGE
}

command-synopsis() {
    cat <<MESSAGE
usage: git elegant show-release-notes [<layout> | <layout> <from-reference> | <layout> <from-reference> <to-reference>]
MESSAGE
}

command-description() {
    cat<<MESSAGE
Generates a release notes using commits subjects between the given references.
The commits are ordered from oldest to newest. By default, the \`from-reference\`
is the last available tag, and the \`to-reference\` is a HEAD revision. If
there are no tags, all commits will be displayed.

There are two options for a \`layout\`:

1. \`simple\` prints the messages as a plain text (default one)
2. \`smart\` prints the messages in a form of adopted for a git hosting. If the
hosting is unknown, the default layout is used. Now only GitHub is supported
(an HTML output).

Approximate commands flow is
\`\`\`bash
==>> git elegant show-release-notes
# produces output like this
Release notes
- Add \`show-release-notes\` command
- Add \`release-work\` command
\`\`\`
MESSAGE
}

--github-release-notes() {
    local diapason="${1}"
    local changelog="github-release-notes"
    echo "<h3>Release notes</h3>" > ${changelog}
    local url=$(git remote get-url origin)
    local repository=""
    [[ ${url} =~ "github.com/" ]] && repository=${url##*github.com/}
    [[ ${url} =~ "github.com:" ]] && repository=${url##*github.com:}
    repository=${repository%%.git}

    for hash in $(git log ${diapason} --format=%H --reverse); do
        local issues=$(git show -s --pretty=%B ${hash} | grep "#")
        [[ ! -z ${issues} ]] && issues=" [${issues}]"
        local subject=$(git show -s --pretty=%s ${hash})
        echo "<li> <a href=\"https://github.com/${repository}/commit/${hash}\">${subject}</a>${issues}</li>" >> ${changelog}
    done
    cat ${changelog}
    remove-file ${changelog}
}

--simple-release-notes() {
    local diapason="${1}"
    local changelog="simple-release-notes"
    echo "Release notes" > ${changelog}
    for hash in $(git log ${diapason} --format=%H --reverse); do
        echo "- $(git show -s --pretty=%s ${hash})" >> ${changelog}
    done
    cat ${changelog}
    remove-file ${changelog}
}

default() {
    source ${BINS}/plugins/state
    local layout=${1:-simple}
    local first=${2:-$(last-tag)}
    local second=${3:-@}
    local diapason=${first}...${second}
    if [[ ${first} == all-commits ]] || [[ -z ${first} ]]; then
        diapason=${second}
    fi
    case ${layout} in
        simple)
            --simple-release-notes ${diapason}
            ;;
        smart)
            if [[ "$(git remote get-url origin)" =~ ((https://)|(git@))github.com ]]; then
                --github-release-notes ${diapason}
            else
                --simple-release-notes ${diapason}
            fi
            ;;
        *)  error-text "A layout can be 'simple' or 'smart'! '${layout}' layout is not supported."
            exit 43;;

    esac
}
