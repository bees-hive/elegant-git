#!/usr/bin/env bash

user_name_key="user.name"
user_name_default=$(git config ${user_name_key} || echo "")
user_name_message="What is your user name?"

user_email_key="user.email"
user_email_default=$(git config ${user_email_key} || echo "")
user_email_message="What is your user email?"

core_editor_key="core.editor"
core_editor_default=$(git config "${core_editor_key}" || echo "vim")
core_editor_message="What is the command to launching an editor?"


# mandatory
core_comment=("core.commentChar" "|")
apply_whitespace=("apply.whitespace" "fix")
fetch_prune=("fetch.prune" "true")
fetch_pruneTags=("fetch.pruneTags" "false")
## Line endings
## See https://help.github.com/en/articles/configuring-git-to-handle-line-endings
### MAC/Linux
core_autocrlf_darwinlinux=("core.autocrlf" "input")
### Windows
core_autocrlf_windows=("core.autocrlf" "true")
## Pull
pull_rebase=("pull.rebase" "true")
## Rebase
rebase_autoStash=("rebase.autoStash" "false")
## Credentials, MAC only
credential_helper_darwin=("credential.helper" "osxkeychain")

__ask_question() {
    # usage: __ask_options <prefix>
    # it makes available ANSWER available
    local message=$(eval "echo -n \$${1}_message")
    local default=$(eval "echo -n \$${1}_default")
    if [[ -n "$default" ]]; then message="${message} {$default}"; fi
    question-text "${message}: "
    read answer
    export ANSWER=${answer:-$default}
}

basics-configuration() {
    # usage: interactive-configuration <--global | --local> <name> ... -- <name if not set> ...
    info-box "Configuring basics..."
    local scope=${1}; shift
    local nonset=false
    local notify=true
    for f in ${@}; do
        local key=$(eval "echo -n \$${f}_key")
        if [[ "${f}" == "--" ]]; then
            nonset=true
            continue
        fi
        if ${nonset}; then
            local current="$(git config ${scope} --get ${key})"
            if [[ -n ${current} ]] ; then
                command-text "git config ${scope} ${key} ${current}"
                continue
            fi
        fi
        if ${notify}; then
            info-text "Please hit enter if you wish {default value}."
            notify=false
        fi
        unset ANSWER
        while [[ -z "${ANSWER}" ]]; do
            __ask_question ${f}
            if [[ -n "${ANSWER}" ]]; then
                git-verbose config ${scope} ${key} "${ANSWER}"
            fi
        done
    done
}

standards-configuration() {
    # usage: mandatory-configuration <--global | --local> <name of array> ...
    info-box "Configuring standards..."
    local scope=${1}; shift
    for config in ${@}; do
        local os=$(uname -s)
        if [[ "Darwin Linux" =~ "${os}" ]]; then
            [[ "${config}" =~ "windows" ]] && continue
            [[ "${os}" = "Darwin" && ! "${config}" =~ "darwin" && "${config}" =~ "linux" ]] && continue
            [[ "${os}" = "Linux" && ! "${config}" =~ "linux"  && "${config}" =~ "darwin" ]] && continue
        fi
        if [[ "Windows" = "${os}" ]]; then
            [[ "${config}" =~ "darwin" || "${config}" =~ "linux" ]] && continue
        fi
        local data=($(eval "echo -n \${${config}[@]}"))
        git-verbose config ${scope} ${data[0]} ${data[1]}
    done
}

aliases-removing() {
    # usage: aliases-removing <--global | --local>
    local scope=${1}
    local aliases=($(git config ${scope} --name-only --get-regexp "^alias\." "^elegant ([-a-z]+)$"))
    if [[ ${#aliases[@]} -ne 0 ]]; then
        info-text "Removing old Elegant Git aliases..."
        local counter=0
        for alias in ${aliases[@]}; do
            git-verbose config ${scope} --unset ${alias}
            counter=$((counter+1))
        done
        info-text "${counter} Elegant Git aliases were removed."
    fi
}

aliases-configuration() {
    # usage: aliases-configuration <--global | --local> <command> ...
    info-box "Configuring aliases..."
    local scope=${1}; shift
    for command in ${@}; do
        local alias=${command}
        local origin="elegant ${command}"
        git-verbose config ${scope} "alias.${alias}" "${origin}"
    done
}

obsolete-configurations-removing() {
    # usage: obsolete-configurations-removing <--global | --local>
    local scope=${1}
    info-box "Removing obsolete configurations..."
    local old_acquired="elegant.acquired"
    if git config ${scope} --get-regexp ${old_acquired} >/dev/null; then
        info-text "Removing old Elegnat Git configuration keys..."
        git-verbose config ${scope} --unset ${old_acquired}
    fi
    aliases-removing ${scope}
}
