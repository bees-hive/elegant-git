#!/usr/bin/env bash
# The plugin which allows running a given functions through different types
# (aka pre- and post-conditions).

has-changes() {
    # Check if a current index (HEAD) has staged or non-staged changes
    if git diff-index --quiet HEAD && git diff-index --cached --quiet HEAD; then
        return 1
    fi
    return 0
}

--stash-id() {
    # usage: --stash-id <message>
    echo $(git stash list --grep="${1}" --format="%gd")
}

--config() {
    git config --local "$@"
}

stash-pipe() {
    # Makes automatic stash and unstash if possible
    # usage:  stash-pipe <command> [args]...
    # The pipe behavior is tested based on `start-work` command. That's why you
    # have to add new tests in `git-elegant-start-work.bats` if you want to
    # check some specific cases.
    local key="elegant.${COMMAND}-stash"
    git update-index -q --really-refresh
    if has-changes && test -z $(--config --get ${key}); then
        local message="git-elegant ${COMMAND} auto-stash: "
        message+="WIP in '$(git rev-parse --abbrev-ref HEAD)' branch "
        message+="on $(date "+%Y-%m-%dT%H:%M:%S")"
        git-verbose stash push --message "${message}"
        if [[ -n $(--stash-id ${message}) ]]; then
            --config ${key} "${message}"
        fi
    fi

    "${@}"

    local saved=$(--config --get ${key})
    if [[ -n ${saved} ]]; then
        git update-index -q --really-refresh
        --config --unset ${key}
        git-verbose stash pop $(--stash-id ${saved})
    fi
}

branch-pipe() {
    # Moves to the current branch after a command execution
    # usage: branch-pipe <command> [args]...
    local to=$(git rev-parse --abbrev-ref HEAD)
    "${@}"
    local now=$(git rev-parse --abbrev-ref HEAD)
    if [[ ! "${to}" == "${now}" ]]; then
        git-verbose checkout ${to}
    fi
}
