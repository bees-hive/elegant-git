#!/usr/bin/env bash
set -e

command-purpose() {
    cat <<MESSAGE
Creates a new branch.
MESSAGE
}

command-synopsis() {
    cat <<MESSAGE
usage: git elegant start-work <name> [from-ref]
MESSAGE
}

command-description() {
    cat<<MESSAGE
Creates a new local branch based on the latest version of the default upstream
branch. If there are some uncommitted changes, they will be moved to the new
branch.

\`from-ref\` argument overrides the default upstream branch with a given one.

The command uses stash pipe to preserve the current Git state prior to execution
and restore after.

Approximate commands flow is
\`\`\`bash
==>> git elegant start-work task-123
git stash save elegant-git
git checkout master
git pull
git checkout -b task-123
git stash apply stash^{/elegant-git}
git stash drop stash@{0}
\`\`\`

The command works even if a remote is unavailable.
MESSAGE
}

--start-work-logic(){
    source ${BINS}/plugins/state
    local target=${2:-${MASTER}}
    git-verbose checkout ${target}
    if is-there-upstream-for ${target}; then
        git-verbose pull || info-text "As the pull can't be completed, the current local version is used."
    fi
    git-verbose checkout -b "$1"
}

default() {
    _error-if-empty "$1" "Please give a name for the new branch."
    stash-pipe --start-work-logic "${@}"
}
