#!/usr/bin/env bash
set -e

command-purpose() {
    cat <<MESSAGE
Rebases HEAD interactively.
MESSAGE
}

command-synopsis() {
    cat <<MESSAGE
usage: git elegant polish-work
MESSAGE
}

command-description() {
    cat<<MESSAGE
Finds the new commits in HEAD (a delta in commits between the current and the
default development branches) and runs interactive rebase against them.

If there is a rebase in progress, the command will pick it up and continue.

The command doesn't allow to modify the history of the default development
branch.

The command uses stash pipe to preserve the current Git state prior to
execution and restore after. This means that the uncommitted local
modifications, if they are present, will be stashed. And they will be
uncovered if the rebase completes without errors or interruptions like for
solving conflicts, etc. Otherwise, please run \`git stash pop\` to get them.

Approximate commands flow is
\`\`\`bash
==>> git elegant polish-work
git rebase --interactive @~5
\`\`\`
MESSAGE
}

default() {
    if [[ $(git rev-parse --abbrev-ref HEAD) == "master" ]]; then
        error-box "'master' branch history can't be rewritten. Please read more on ${__site}"
        exit 42
    fi
    source ${BINS}/plugins/state
    if is-there-active-rebase; then
        git-verbose rebase --continue
    else
        local commits=($(git rev-list ${DEFAULT_BRANCH}..@))
        if [[ ${#commits[*]} -eq 0 ]]; then
            info-text "There are no new commits comparing to '${DEFAULT_BRANCH}' branch."
        else
            stash-pipe git-verbose rebase --interactive @~${#commits[*]}
        fi
    fi
}
