#!/usr/bin/env bash
set -e

command-purpose() {
    cat <<MESSAGE
Publishes current branch to a remote repository.
MESSAGE
}

command-synopsis() {
    cat <<MESSAGE
usage: git elegant deliver-work [branch-name]
MESSAGE
}

command-description() {
    cat<<MESSAGE
Updates the current branch by rebasing the default upstream branch. If there is
a rebase in progress, the command will continue it instead of initiation a new
one. Then, it pushes HEAD to the appropriate upstream branch.

By default, the name of remote branch is equal to the local one. If a local
branch has an upstream branch configured, it will be used as a remote branch.
If you provide a custom name of the remote branch, it will be used as a remote
branch.

The command uses stash pipe to preserve the current Git state prior to execution
and restore after.

If the push output contains an URL (like a link to create a pull request), it
will be open (in case if \`open\` command is available) in a default browser.

Approximate commands flow is
\`\`\`bash
==>> git elegant deliver-work
git fetch
git rebase origin/master
git push --set-upstream --force origin task-123:task-123
\`\`\`
MESSAGE
}

--open-urls-if-possible() {
    echo "${1}"
    type open >/dev/null 2>&1 || { return 0; }
    for line in ${1}; do
        if [[ ${line} =~ (^http)(.+) ]]; then
            open ${line}
        fi
    done
}

--deliver-work-logic() {
    source ${BINS}/plugins/state
    if is-there-active-rebase; then
        git-verbose rebase --continue
    else
        git-verbose fetch
        git-verbose rebase ${RMASTER}
    fi
    local upstream=$(git branch --list --format "%(upstream:short)" ${1})
    local remote_branch=${upstream/*\//}
    local remote=${upstream/\/*/}
    if [[ -n "${2}" ]]; then
        remote_branch=${2}
    fi
    if [[ -z "${remote_branch}" ]]; then
        remote_branch=${1}
    fi
    if [[ -z "${remote}" ]]; then
        remote=${REMOTE_NAME}
    fi
    git-verbose-op --open-urls-if-possible push --set-upstream --force ${remote} ${1}:${remote_branch}
}

default() {
    local branch=$(git rev-parse --abbrev-ref HEAD)
    if [[ "${branch}" == "master" ]]; then
        error-box "No pushes to 'master' branch. Please read more on ${__site}"
        exit 42
    fi
    stash-pipe --deliver-work-logic ${branch} "${@}"
}
