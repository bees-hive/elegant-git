#!/usr/bin/env bash
set -e

command-purpose() {
    cat <<MESSAGE
Publishes HEAD to a remote repository.
MESSAGE
}

command-synopsis() {
    cat <<MESSAGE
usage: git elegant deliver-work [branch-name]
MESSAGE
}

command-description() {
    cat<<MESSAGE
Rebases the head of the remote default development branch into the current one
and pushes the branch to the remote default upstream repository.

The command doesn't allow to push a protected branch.

A \`[branch-name]\` name is a name of a remote-tracking branch in the remote
default upstream repository. By default, it is equal to the name of the current
local branch. However, if HEAD has a configured remote-tracking branch, it will
be used. But if the \`[branch-name]\` argument is provided, it will be used as
the name of the remote-tracking branch.

If there is a rebase in progress, the command will pick it up as a part of the
execution flow.

If the push output contains an URL (like a link to create a pull request), it
will be open (in case if \`open\` command is available) in a default browser.

The command uses stash pipe to preserve the current Git state prior to execution
and restore after.

Approximate commands flow is
\`\`\`bash
==>> git elegant deliver-work
git fetch
git rebase origin/main
git push --set-upstream --force origin task-123:task-123
\`\`\`
MESSAGE
}

--open-urls-if-possible() {
    echo "${1}"
    type open >/dev/null 2>&1 || { return 0; }
    for line in ${1}; do
        if [[ ${line} =~ (^http)(.+) ]]; then
            open ${line}
        fi
    done
}

--deliver-work-logic() {
    source ${BINS}/plugins/state
    source ${BINS}/plugins/transformation
    source ${BINS}/plugins/configuration-default-branches
    if is-there-active-rebase; then
        git-verbose rebase --continue
    else
        git-verbose fetch
        git-verbose rebase ${DEFAULT_REMOTE_TRACKING_BRANCH}
    fi
    local upstream=$(git branch --list --format "%(upstream:short)" ${1})
    local branch=$(branch-from-remote-branch ${upstream})
    local remote=$(remote-from-remote-branch ${upstream})
    if [[ -n "${2}" ]]; then
        branch=${2}
    fi
    if [[ -z "${branch}" ]]; then
        branch=${1}
    fi
    if [[ -z "${remote}" ]]; then
        remote=${DEFAULT_UPSTREAM_REPOSITORY}
    fi
    git-verbose-op --open-urls-if-possible push --set-upstream --force ${remote} ${1}:${branch}
}

default() {
    local branch=$(git rev-parse --abbrev-ref HEAD)
    source ${BINS}/plugins/configuration-protected-branches
    if is-branch-protected ${branch} ; then
        error-box "The push of the protected '${branch}' branch is prohibited."
        error-text "Consider using 'git elegant accept-work' or use plain 'git push'."
        exit 42
    fi
    stash-pipe --deliver-work-logic ${branch} "${@}"
}
