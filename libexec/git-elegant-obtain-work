#!/usr/bin/env bash
set -e

command-purpose() {
    cat <<MESSAGE
Checkouts a remote-tracking branch.
MESSAGE
}

command-synopsis() {
    cat <<MESSAGE
usage: git elegant obtain-work <name> [local branch]
MESSAGE
}

command-description() {
    cat<<MESSAGE
Seeks across all remote repositories for a branch matching with a given name
and checkouts it.

A \`<name>\` is a full or a partial name (a pattern) of the remote-tracking
branch. If the pattern is specified and there are more then 1 matching branch,
the execution stops with a corresponding error message.

A \`[local branch]\` is the name of the local branch in the local repository
to checkout into. By default, it responds to the name of the remote-tracking
branch. However, if this argument is provided, the given name is set for the
local branch.

Approximate commands flow is
\`\`\`bash
==>> git elegant obtain-work 133 task-133
git fetch --all
git checkout -B task-133 custom-remote/feature/133
\`\`\`
MESSAGE
}

default() {
    local PATTERN=${1}
    _error-if-empty "${PATTERN}" "Please provide a branch name or its part."
    git-verbose fetch --all
    local REMOTE_BRANCHES=(
            $(git for-each-ref --format='%(refname:short)' refs/remotes | grep "${PATTERN}")
        )
    if [[ ${#REMOTE_BRANCHES[@]} > 1 ]]; then
        info-text "The following branches are found:"
        for branch in ${REMOTE_BRANCHES[@]}; do
            info-text " - ${branch}"
        done
        error-box "Please re-run the command with concrete branch name from the list above!"
        exit 43
    fi
    if [[ ${#REMOTE_BRANCHES[@]} = 1 ]]; then
        local REMOTE=${REMOTE_BRANCHES[0]}
        local LOCAL=${2}
        if [[ -z ${LOCAL} ]]; then
            source ${BINS}/plugins/transformation
            LOCAL=$(branch-from-remote-branch ${REMOTE})
        fi
        git-verbose checkout -B ${LOCAL} ${REMOTE}
    else
        error-box "There is no branch that matches the '${PATTERN}' pattern."
        exit 43
    fi
}
