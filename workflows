#!/usr/bin/env bash
set -e

source ./libexec/plugins/text

bash_3_2_57=3.2.57
bash_5_0_17=5.0.17
python_3_8_3=3.8.3
git_2_26_2=2.26.2
bashes=(
    ${bash_5_0_17}
    ${bash_3_2_57}
)
gits=(
    ${git_2_26_2}
)
base_testing_worker=bash${bash_3_2_57}-git${git_2_26_2}

eg_docker_organization=beeshive
eg_documents_repository=${eg_docker_organization}/elegant-git-docs-workflows
eg_documents_image=${eg_documents_repository}:python${python_3_8_3}-bash${bash_5_0_17}
eg_bats_repository=${eg_docker_organization}/elegant-git-bats-worker
eg_bats_image=${eg_bats_repository}:${base_testing_worker}


--publish-worker() {
    info-text "Select image to push:"
    select tag in $(docker image ls --filter reference=${1} --format "{{.Repository}}:{{.Tag}}"); do
        docker push ${tag}
        break
    done
}

# docs workflows
prepare-docs-worker() {
    local bashversion=${bash_5_0_17}
    local pythonversion=${python_3_8_3}
    docker build --tag ${eg_documents_image} \
                 --label bashversion=${bashversion} \
                 --label pythonversion=${pythonversion} \
                 --build-arg bashversion=${bashversion} \
                 --build-arg pythonversion=${pythonversion} \
                 --file .workflows/docs/Dockerfile .
}

publish-docs-worker() {
    --publish-worker ${eg_documents_repository}
}

generate-docs() {
    docker run --interactive --rm \
               --mount type=bind,source=$(pwd),target=/elegant-git \
               ${eg_documents_image} generate
}

preview-docs() {
    { sleep 5 && open http://localhost & } || true
    docker run --interactive --tty --rm \
               --publish 80:80 \
               --mount type=bind,source=$(pwd),target=/elegant-git \
               ${eg_documents_image} preview
}

serve-docs() {
    generate-docs
    preview-docs
}
# docs workflows

repository() {
    info-text "Start container..."
    docker run --interactive --tty --detach --rm \
               --name repository \
               --workdir /tmp/elegant-git-repo \
               --mount type=bind,source=$(pwd),target=/elegant-git \
               ${eg_bats_image} bash
    info-text "Init repository..."
    docker exec --interactive --tty repository bash -c "
        cd /elegant-git
        source tests/addons-repo.bash
        source tests/addons-common.bash
        repo-new
    "
    info-text "Install Elegant Git..."
    docker exec --interactive --tty repository bash -c "
        cd /elegant-git
        .workflows/installation-workflows.bash install
    "
    info-text "Ready! Enjoy experiments..."
    docker attach repository
}

# testing workflows
prepare-bats-worker() {
    info-text "Select Bash and Git version:"
    select bashv in ${bashes[*]}; do
        bashversion=${bashv}
        break
    done
    select gitv in ${gits[*]}; do
        gitversion=${gitv}
        break
    done
    local batsversion=v1.2.0
    docker build --tag ${eg_bats_repository}:bash${bashversion}-git${gitversion} \
                 --label bashversion=${bashversion} \
                 --label gitversion=${gitversion} \
                 --label batsversion=${batsversion} \
                 --build-arg bashversion=${bashversion} \
                 --build-arg gitversion=${gitversion} \
                 --build-arg batsversion=${batsversion} \
                 .workflows/bats
}

publish-bats-worker() {
    --publish-worker ${eg_bats_repository}
}

testing() {
    echo $@
    docker run --interactive --rm  \
               --mount type=bind,source=$(pwd),target=/elegant-git \
               ${eg_bats_image} some_tests "$@"
}

__fail() {
    error-box $@
    exit 1
}

test-commands-docs() {
    (
        generate-docs
        git update-index --really-refresh
        git diff-index --quiet HEAD docs
    ) || __fail "'docs/commands.md' is not up to date. Please run './workflows generate-docs' and commit the changes."
}

test-docs-site() {
    {
        docker run --interactive --rm \
                   --mount type=bind,source=$(pwd),target=/elegant-git \
                ${eg_documents_image} build
    } || __fail "Unable to build the documentation site."
}

test-installation() {
    (
        docker run --interactive --rm \
               --mount type=bind,source=$(pwd),target=/elegant-git \
               ${eg_bats_image} bash -c "
               .workflows/installation-workflows.bash install
               .workflows/installation-workflows.bash smoke-tests
        "
    ) || __fail "Installation test is failed."
}

ci() {
    docker run --interactive --rm \
               --mount type=bind,source=$(pwd),target=/elegant-git \
               ${eg_bats_image} all_tests
    test-commands-docs
    test-docs-site
    test-installation
}

robot() {
    # runs a
    local smart_testing_status=""
    local command_files=($(git ls-files --modified --other -- libexec/git-elegant*))

    for command_file in ${command_files[@]}; do
        local command_name=$(basename ${command_file})
        if ! test -f tests/${command_name}.bats; then continue; fi
        ( testing ${command_name} && info-text "'${command_file}' testing is passed." ) || {
            error-text "'${command_name}' testing is failed."
            smart_testing_status=failed
        }
    done
    local tests_files=($(git ls-files --modified --other -- tests/git-elegant*.bats))
    for test_file in ${tests_files[@]}; do
        local file_name=$(basename ${test_file})
        if [[ ${command_files[@]} =~ "${file_name/.bats/}" ]] ; then
            continue # already tested
        fi
        if ! test -f tests/${command_name}.bats; then continue; fi
        ( testing ${file_name} && info-text "'${file_name}' testing is passed.") || {
            error-text "'${file_name}' testing is failed."
            smart_testing_status=failed
        }
    done
    if test -z "${smart_testing_status}"; then
        info-text "Everything is great!"
    else
        error-text "Something should be improved!"
        exit 1
    fi
}
# testing workflows

usage() {
    cat <<MESSAGE
usage: ${BASH_SOURCE[0]} [command] [arg]...

Available commands:
  developing documentation
    prepare-docs-worker  builds a new '${eg_documents_image}' image
    publish-docs-worker  pushes the '${eg_documents_image}' image
    generate-docs        generates fresh commands documentation
    preview-docs         runs a site with the current documentation (http://localhost)
    serve-docs           runs 'generate-docs' and 'preview-docs'
  testing modifications
    prepare-bats-worker  builds a new '${eg_bats_image}' image
    publish-bats-worker  pushes the '${eg_bats_image}' image
    testing              runs bats tests; accepts a optional pattern for tests
                         filtering ("${BASH_SOURCE[0]} testing work" run all tests
                         which have the word in the test name)
    test-commands-docs   checks if the commands docs are up to date
    test-docs-site       checks if the docs site can be built
    test-installation    checks if installation works fine
    ci                   runs CI quality assessment workflow
    robot                runs tests for updated "libexec/git-elegant*" or
                         "tests/git-elegant*.bats" files
  other
    help                 prints this message
    repository           creates a git repository and installs Elegant Git within
MESSAGE
}

commands=(
    prepare-docs-worker
    publish-docs-worker
    generate-docs
    preview-docs
    serve-docs
    prepare-bats-worker
    publish-bats-worker
    testing
    test-commands-docs
    test-docs-site
    test-installation
    usage
    robot
    repository
    ci
)

main() {
    local command=${1}
    if [[ -z ${command} ]]; then
        question-text "Please select a command:"
        echo ""
        select any in ${commands[@]}; do
            command=${any}
            if test ${command} = testing; then
                question-text "Please give the tests pattern: "
                read args
            fi
            break
        done
    else
        shift
    fi
    info-box "Run:" ${command} ${args:-${@}}
    ${command} ${args:-${@}}
}

main ${@}
